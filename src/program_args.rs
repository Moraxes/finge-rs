use clap::{Arg, ArgMatches, SubCommand, App};

pub fn get<'a>() -> ArgMatches<'a> {
  App::new("finge-rs")
    .version("0.1")
    .author("Maciej Åšniegocki <m.w.sniegocki@gmail.com")
    .subcommand(SubCommand::with_name("train")
      .arg(Arg::with_name("config")
        .long("config")
        .short("c")
        .takes_value(true)
        .default_value("Fingers.json")
        .help("training configuration file"))
      .arg(Arg::with_name("train_data")
        .long("train-data")
        .short("t")
        .takes_value(true)
        .default_value("Train")
        .help("file with training data"))
      .arg(Arg::with_name("train_data_format")
        .long("format")
        .short("f")
        .takes_value(true)
        .default_value("raw")
        .possible_values(&["raw", "bson"])
        .help("specifies training data format"))
      .arg(Arg::with_name("output")
        .long("output")
        .short("o")
        .takes_value(true)
        .default_value("Model.bson")
        .help("output file for the model"))
      .help("train a model"))
    .subcommand(SubCommand::with_name("eval")
      .arg(Arg::with_name("model")
        .long("model")
        .short("m")
        .takes_value(true)
        .default_value("Model.bson")
        .help("model to be evaluated"))
      .arg(Arg::with_name("input")
        .required(true)
        .multiple(true)
        .help("input file(s) to be evaluated (use file:offset syntax to evaluate specific example)")))
    .get_matches()
}
